{"version":3,"sources":["poll.js"],"names":[],"mappings":"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","file":"poll.js","sourcesContent":["import TwitterConnector from './connector';\nimport logger from '@hoist/logger';\nimport Moment from 'moment'\nimport errors from '@hoist/errors';\n\n\nvar APILimitReachedError = errors.create({\n  name: 'APILimitReachedError'\n});\n\nvar ConnectorRequiresAuthorizationError = errors.create({\n  name: 'ConnectorRequiresAuthorizationError'\n});\n\nlet frequency = 90; //poll every 90 seconds\n\nclass TwitterPoller {\n  constructor(context) {\n    this._logger = logger.child({\n      cls: this.constructor.name,\n      subscription: context.subscription._id,\n      application: context.application._id\n    });\n    this._context = context;\n    this._connector = new TwitterConnector(context.settings);\n  }\n  poll() {\n    return this.assertCanPoll()\n      .then(() => {\n        return this._context.subscription.set('lastPolled', Moment.utc().format());\n      })\n      .then(() => {\n        return this.pollSubscription()\n      }).catch((err) => {\n        this._logger.error(err);\n        if (!(err instanceof APILimitReachedError) && !(err instanceof ConnectorRequiresAuthorizationError)) {\n          this._logger.alert(err);\n        }\n      });\n  }\n  assertCanPoll() {\n    var lastPolled = this._context.subscription.get('lastPolled');\n    return Promise.resolve()\n      .then(() => {\n        this._logger.info({\n          lastPolled: lastPolled\n        }, 'checking if the poll can happen');\n        if (lastPolled && new Moment(lastPolled).isAfter(new Moment().subtract(frequency, 'seconds'))) {\n          this._logger.warn('Poller limit reached');\n          this._context.subscription.delayTill(new Moment(lastPolled).add(frequency, 'seconds').toDate());\n          throw new APILimitReachedError();\n        }\n      }).then(() => {\n        this._logger.info('checking credentials');\n        if (!(this._context.authorization)) {\n          this._logger.warn('Connector needs auth and no auth set');\n          if (!lastPolled) {\n            lastPolled = new Moment().toDate();\n          }\n          this._context.subscription.delayTill(new Moment(lastPolled).add(frequency, 'seconds').toDate());\n          throw new ConnectorRequiresAuthorizationError();\n        }\n      });\n  }\n  pollSubscription() {\n    return Promise.resolve()\n      .then(() => {\n        this._logger.info('setting connector authorization');\n        return this._connector.authorize(this._context.authorization);\n      }).then(() => {\n        this._logger.info('polling endpoints');\n        return Promise.all(this._context.subscription.endpoints.map((endpoint) => {\n          return this.pollEndpoint(endpoint);\n        }));\n      }).then(() => {\n        this._logger.info('subscription polled');\n      });\n  }\n  pollEndpoint(endpoint) {\n    if (endpoint.toLowerCase() === \"mention\") {\n      return this.pollMentions();\n    } else if (endpoint.toLowerCase() === \"directmessage\") {\n      return this.pollDirectMessages();\n    } else if (endpoint.toLowerCase() === \"tweet\") {\n      return this.pollTweets();\n    }\n  }\n  pollMentions() {\n    return Promise.resolve()\n      .then(() => {\n        let endpointMeta = this._context.subscription.get('mentions');\n        if (!endpointMeta) {\n          endpointMeta = {}\n        }\n        let path = \"/statuses/mentions_timeline.json?contributor_details=true\";\n        if (endpointMeta.lastId) {\n          path = path + \"&since_id=\" + endpointMeta.lastId;\n        }\n        return this._connector.get(path)\n          .then((mentions) => {\n            this._logger.info({\n              mentions: mentions.length\n            }, 'got mentions');\n            if (mentions.length > 0) {\n              let latest = mentions[0];\n              this._logger.info('processing mentions');\n              return Promise.all(mentions.map((mention) => {\n\n                if (endpointMeta && (!endpointMeta.lastId || mention.id > endpointMeta.lastId)) {\n                  if (mention.id > latest.id) {\n                    this._logger.info({\n                      id: mention.id\n                    }, 'updating id');\n                    latest = mention;\n                  }\n                  this._logger.info('processing mention');\n                  return this.processMention(mention);\n                } else {\n                  this._logger.info({\n                    mention: mention\n                  }, 'mention id was less than last id')\n                }\n              })).then(() => {\n                endpointMeta.lastId = latest.id;\n                return this._context.subscription.set('mentions', endpointMeta);\n              });\n            } else {\n              this._logger.info('no mentions to process');\n            }\n          });\n      })\n  }\n  processMention(mention) {\n    this._logger.info({\n      mention: mention.id\n    }, 'raising event for new mention');\n    var eventName = `${this._context.connectorKey}:new:mention`;\n    return this.emit(eventName, mention);\n  }\n  pollTweets() {\n    return Promise.resolve()\n      .then(() => {\n        let endpointMeta = this._context.subscription.get('tweets');\n        if (!endpointMeta) {\n          endpointMeta = {}\n        }\n        let path = \"/statuses/user_timeline.json?contributor_details=true\";\n        if (endpointMeta.lastId) {\n          path = path + \"&since_id=\" + endpointMeta.lastId;\n        }\n        return this._connector.get(path)\n          .then((tweets) => {\n            this._logger.info({\n              tweets: tweets.length\n            }, 'got tweets');\n            if (tweets.length > 0) {\n              let latest = tweets[0];\n              this._logger.info('processing tweets');\n              return Promise.all(tweets.map((mention) => {\n\n                if (endpointMeta && (!endpointMeta.lastId || mention.id > endpointMeta.lastId)) {\n                  if (mention.id > latest.id) {\n                    this._logger.info({\n                      id: mention.id\n                    }, 'updating id');\n                    latest = mention;\n                  }\n                  this._logger.info('processing mention');\n                  return this.processTweet(mention);\n                } else {\n                  this._logger.info({\n                    mention: mention\n                  }, 'mention id was less than last id')\n                }\n              })).then(() => {\n                endpointMeta.lastId = latest.id;\n                return this._context.subscription.set('tweets', endpointMeta);\n              });\n            } else {\n              this._logger.info('no tweets to process');\n            }\n          });\n      })\n  }\n  processTweet(tweet) {\n    this._logger.info({\n      tweet: tweet.id\n    }, 'raising event for new tweet');\n    var eventName = `${this._context.connectorKey}:new:tweet`;\n    return this.emit(eventName, tweet);\n  }\n}\n\nexport default function (context, raiseMethod) {\n  let poller = new TwitterPoller(context);\n  poller.emit = raiseMethod;\n  return poller.poll();\n};\n"],"sourceRoot":"/source/"}