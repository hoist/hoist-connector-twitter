{"version":3,"sources":["poll.js"],"names":[],"mappings":"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","file":"poll.js","sourcesContent":["import TwitterConnector from './connector';\nimport logger from '@hoist/logger';\nimport Moment from 'moment'\nimport errors from '@hoist/errors';\n\n\nvar APILimitReachedError = errors.create({\n  name: 'APILimitReachedError'\n});\n\nvar ConnectorRequiresAuthorizationError = errors.create({\n  name: 'ConnectorRequiresAuthorizationError'\n});\n\nlet frequency = 90; //poll every 90 seconds\n\nclass TwitterPoller {\n  constructor(context) {\n    this._logger = logger.child({\n      cls: this.constructor.name,\n      subscription: context.subscription._id,\n      application: context.application._id\n    });\n    this._context = context;\n    this._connector = new TwitterConnector(context.settings);\n  }\n  poll() {\n    return this.assertCanPoll()\n      .then(() => {\n        this._context.subscription.set('lastPolled', Moment.utc().format());\n      })\n      .then(() => {\n        return this.pollSubscription()\n      }).catch((err) => {\n        this._logger.error(err);\n        if (!(err instanceof APILimitReachedError) && !(err instanceof ConnectorRequiresAuthorizationError)) {\n          this._logger.alert(err);\n        }\n      });\n  }\n  assertCanPoll() {\n    var lastPolled = this._context.subscription.get('lastPolled');\n    return Promise.resolve()\n      .then(() => {\n        this._logger.info({\n          lastPolled: lastPolled\n        }, 'checking if the poll can happen');\n        if (lastPolled && new Moment(lastPolled).isAfter(new Moment().subtract(frequency, 'seconds'))) {\n          this._logger.warn('Poller limit reached');\n          this._context.subscription.delayTill(new Moment(lastPolled).add(frequency, 'seconds').toDate());\n          throw new APILimitReachedError();\n        }\n      }).then(() => {\n        this._logger.info('checking credentials');\n        if (!(this._context.authorization)) {\n          this._logger.warn('Connector needs auth and no auth set');\n          if (!lastPolled) {\n            lastPolled = moment().toDate();\n          }\n          this._context.subscription.delayTill(moment(lastPolled).add(frequency, 'seconds').toDate());\n          throw new ConnectorRequiresAuthorizationError();\n        }\n      });\n  }\n  pollSubscription() {\n    return Promise.resolve()\n      .then(() => {\n        this._logger.info('setting connector authorization');\n        return this._connector.authorize(this._context.authorization);\n      }).then(() => {\n        this._logger.info('polling endpoints');\n        return Promise.all(this._context.subscription.endpoints.map((endpoint) => {\n          return this.pollEndpoint(endpoint);\n        }));\n      }).then(() => {\n        this._logger.info('subscription polled');\n      });\n  }\n  pollEndpoint(endpoint) {\n    if (endpoint.toLowerCase() === \"mentions\") {\n      return this.pollMentions();\n    } else if (endpoint.toLowerCase() === \"directmessages\") {\n      return this.pollDirectMessages();\n    }\n  }\n  pollMentions() {\n    return Promise.resolve()\n      .then(() => {\n        let endpointMeta = this._context.subscription.get('mentions');\n        if (!endpointMeta) {\n          endpointMeta = {}\n        }\n        let path = \"/statuses/mentions_timeline.json?contributor_details=true\";\n        if (endpointMeta.lastId) {\n          path = path + \"&since_id=\" + endpointMeta.lastId;\n        }\n        return this._connector.get(path)\n          .then((mentions) => {\n            this._logger.info({\n              mentions: mentions.length\n            }, 'got mentions');\n            if (mentions.length > 0) {\n              let latest = mentions[0];\n              this._logger.info('processing mentions');\n              return Promise.all(mentions.map((mention) => {\n\n                if (endpointMeta && mention.id > endpointMeta.lastId) {\n                  if (mention.id > latest.id) {\n                    this._logger.info({\n                      id: mention.id\n                    }, 'updating id');\n                    latest = mention;\n                  }\n                  this._logger.info('processing mention');\n                  return this.processMention(mention);\n                } else {\n                  this._logger.info({\n                    mention: mention\n                  }, 'mention id was less than last id')\n                }\n              })).then(() => {\n                endpointMeta.lastId = latest.id;\n                return this._context.subscription.set('mentions', endpointMeta);\n              });\n            } else {\n              this._logger.info('no mentions to process');\n            }\n          });\n      })\n  }\n  processMention(mention) {\n    this._logger.info({\n      mention: mention.id\n    }, 'raising event for new mention');\n    var eventName = `${this._context.connectorKey}:new:mention`;\n    return this.emit(eventName, mention);\n  }\n}\n\nexport default function (context, raiseMethod) {\n  let poller = new TwitterPoller(context);\n  poller.emit = raiseMethod;\n  return poller.poll();\n};\n"],"sourceRoot":"/source/"}