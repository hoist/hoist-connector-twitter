{"version":3,"sources":["connector.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AASA,IAAI,SAAS,GAAG;AACd,iBAAe,EAAE,6CAA6C;AAC9D,gBAAc,EAAE,4CAA4C;AAC5D,kBAAgB,EAAE,yCAAyC;CAC5D,CAAC;AACF,IAAI,OAAO,GAAG,6BAA6B;;;;;AAAC;IAKvB,gBAAgB;YAAhB,gBAAgB;;;;;;;;;AAQnC,WARmB,gBAAgB,CAQvB,aAAa,EAAE;0BARR,gBAAgB;;uEAAhB,gBAAgB,aAS3B,YAvBR,KAAK,EAuBS,EAAE,EAAE,aAAa,EAAE,SAAS,CAAC;;AACzC,UAAK,SAAS,GAAG,aAAa,CAAC,QAAQ,CAAC;;GACzC;;eAXkB,gBAAgB;;wBAY/B,IAAI,EAAE;;AAER,UAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AAChB,YAAI,EAAJ,IAAI;OACL,EAAE,0BAA0B,CAAC,CAAC;AAC/B,aAAO,IAAI,CAAC,eAAe,CAAC,KAAK,OAAK,OAAO,GAAG,IAAI,CAAG,CAAC,IAAI,CAAC,UAAC,MAAM,EAAK;AACvE,eAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;OAC9B,CAAC,CAAC;KACJ;;;yBACI,IAAI,EAAE,IAAI,EAAE;AACf,UAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AAChB,YAAI,EAAJ,IAAI;OACL,EAAE,2BAA2B,CAAC,CAAC;AAChC,aAAO,IAAI,CAAC,eAAe,CAAC,MAAM,OAAK,OAAO,GAAG,IAAI,EAAI,IAAI,EAAE,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,EAAK;AAClG,eAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;OAC9B,CAAC,CAAC;KACJ;;;SA5BkB,gBAAgB;mBAlBnC,kBAAkB;;kBAkBC,gBAAgB","file":"connector.js","sourcesContent":["import {\n  OAuthConnectorBase\n}\nfrom '@hoist/oauth-connector';\nimport {\n  merge\n}\nfrom 'lodash';\n\nlet overrides = {\n  requestTokenUri: 'https://api.twitter.com/oauth/request_token',\n  accessTokenUri: 'https://api.twitter.com/oauth/access_token',\n  authorizationUri: 'https://api.twitter.com/oauth/authorize'\n};\nlet baseUri = 'https://api.twitter.com/1.1';\n/**\n * A Hoist Connector for connecting to GitHub\n * @extends {OAuthConnectorBase}\n */\nexport default class TwitterConnector extends OAuthConnectorBase {\n\n  /**\n   * create a new connector\n   * @param {object} configuration - the configuration properties to use\n   * @param {string} configuration.consumerKey - the OAuth2 consumer key\n   * @param {string} configuration.consumerSecret - the OAuth consumer secret\n   */\n  constructor(configuration) {\n    super(merge({}, configuration, overrides));\n    this._clientId = configuration.clientId;\n  }\n  get(path) {\n\n    this._logger.info({\n      path\n    }, 'performing a get request');\n    return this._performRequest('GET', `${baseUri}${path}`).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n  post(path, body) {\n    this._logger.info({\n      path\n    }, 'performing a post request');\n    return this._performRequest('POST', `${baseUri}${path}`, body, 'application/json').then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n}\n"],"sourceRoot":"/source/"}