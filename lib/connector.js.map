{"version":3,"sources":["connector.js"],"names":[],"mappings":";;;;;;;;AAAA;;AAIA;;;;;;;;AAKA,IAAI,YAAY;AACd,mBAAiB,6CAAjB;AACA,kBAAgB,4CAAhB;AACA,oBAAkB,yCAAlB;CAHE;AAKJ,IAAI,UAAU,6BAAV;;;;;;IAKiB;;;;;;;;;;AAQnB,WARmB,gBAQnB,CAAY,aAAZ,EAA2B;0BARR,kBAQQ;;uEARR,6BASX,mBAAM,EAAN,EAAU,aAAV,EAAyB,SAAzB,IADmB;;AAEzB,UAAK,SAAL,GAAiB,cAAc,QAAd,CAFQ;;GAA3B;;eARmB;;wBAYf,MAAM;;AAER,WAAK,OAAL,CAAa,IAAb,CAAkB;AAChB,kBADgB;OAAlB,EAEG,0BAFH,EAFQ;AAKR,aAAO,KAAK,eAAL,CAAqB,KAArB,OAA+B,UAAU,IAAzC,EAAiD,IAAjD,CAAsD,UAAC,MAAD,EAAY;AACvE,eAAO,KAAK,KAAL,CAAW,MAAX,CAAP,CADuE;OAAZ,CAA7D,CALQ;;;;yBASL,MAAM,MAAM;AACf,WAAK,OAAL,CAAa,IAAb,CAAkB;AAChB,kBADgB;OAAlB,EAEG,2BAFH,EADe;AAIf,aAAO,KAAK,eAAL,CAAqB,MAArB,OAAgC,UAAU,IAA1C,EAAkD,IAAlD,EAAwD,kBAAxD,EAA4E,IAA5E,CAAiF,UAAC,MAAD,EAAY;AAClG,eAAO,KAAK,KAAL,CAAW,MAAX,CAAP,CADkG;OAAZ,CAAxF,CAJe;;;;SArBE;;;;;AA8BrB,OAAO,OAAP,GAAiB,gBAAjB","file":"connector.js","sourcesContent":["import {\n  OAuthConnectorBase\n}\nfrom '@hoist/oauth-connector';\nimport {\n  merge\n}\nfrom 'lodash';\n\nlet overrides = {\n  requestTokenUri: 'https://api.twitter.com/oauth/request_token',\n  accessTokenUri: 'https://api.twitter.com/oauth/access_token',\n  authorizationUri: 'https://api.twitter.com/oauth/authorize'\n};\nlet baseUri = 'https://api.twitter.com/1.1';\n/**\n * A Hoist Connector for connecting to GitHub\n * @extends {OAuthConnectorBase}\n */\nexport default class TwitterConnector extends OAuthConnectorBase {\n\n  /**\n   * create a new connector\n   * @param {object} configuration - the configuration properties to use\n   * @param {string} configuration.consumerKey - the OAuth2 consumer key\n   * @param {string} configuration.consumerSecret - the OAuth consumer secret\n   */\n  constructor(configuration) {\n    super(merge({}, configuration, overrides));\n    this._clientId = configuration.clientId;\n  }\n  get(path) {\n\n    this._logger.info({\n      path\n    }, 'performing a get request');\n    return this._performRequest('GET', `${baseUri}${path}`).then((result) => {\n      return JSON.parse(result);\n    });\n  }\n  post(path, body) {\n    this._logger.info({\n      path\n    }, 'performing a post request');\n    return this._performRequest('POST', `${baseUri}${path}`, body, 'application/json').then((result) => {\n      return JSON.parse(result);\n    });\n  }\n}\nmodule.exports = TwitterConnector;\n"],"sourceRoot":"/source/"}